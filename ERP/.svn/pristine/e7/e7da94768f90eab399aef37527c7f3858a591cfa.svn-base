package com.ztkj.controller.marketController;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.github.pagehelper.PageInfo;
import com.ztkj.entity.market.Client;
import com.ztkj.entity.market.Order;
import com.ztkj.entity.market.Productdetail;
import com.ztkj.entity.market.ProductdetailVO;
import com.ztkj.entity.purchase.Brand;
import com.ztkj.entity.purchase.Firm;
import com.ztkj.entity.purchase.Wares;
import com.ztkj.entity.purchase.Warestype;
import com.ztkj.entity.sys.Position;
import com.ztkj.entity.sys.User;
import com.ztkj.service.marketService.OrderService;

@Controller
@RequestMapping({"/market/order","/market/orderExamine"})
public class OrderController {
	
	@Resource(name="orderService")
	private OrderService orderService;
	
	
	@RequestMapping("/order_selectByPage.action")
	@ResponseBody
	public PageInfo<Order> order_selectByPage(Order order,Integer pageNum){
		try {
			pageNum=pageNum==null?1:pageNum;
			HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
			User user = (User) request.getSession().getAttribute("loginUser");
			order.setF_dpeople(user);
			PageInfo<Order> pageInfo = orderService.selectByPage(order, pageNum);
			return pageInfo;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectAllOrderExaminee.action")
	@ResponseBody
	public PageInfo<Order> selectAllOrderExaminee(Order order,Integer pageNum){
		try {
			pageNum=pageNum==null?1:pageNum;
			HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
			User user = (User) request.getSession().getAttribute("loginUser");
			order.setF_dpeople(user);
			PageInfo<Order> pageInfo = orderService.selectAllOrderExaminee(order, pageNum);
			return pageInfo;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectAllClient.action")
	@ResponseBody
	public List<Client> selectAllClient(){
		try {
			List<Client> list = orderService.selectAllClient();
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectAllBrand.action")
	@ResponseBody
	public List<Brand> selectAllBrand(){
		try {
			List<Brand> list = orderService.selectAllBrand();
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectAllWarestype.action")
	@ResponseBody
	public List<Warestype> selectAllWarestype(Integer brId){
		try {
			List<Warestype> list = orderService.selectAllWarestype(brId);
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectAllWares.action")
	@ResponseBody
	public List<Wares> selectAllWares(Integer waId){
		try {
			List<Wares> list = orderService.selectAllWares(waId);
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectAllFirm.action")
	@ResponseBody
	public List<Firm> selectAllFirm(Integer waId){
		try {
			List<Firm> list = orderService.selectAllFirm(waId);
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	
	
	@RequestMapping("/order_addOrder.action")
	@ResponseBody
	public String order_addOrder(Order order){
		try {
			orderService.addOrder(order);
			return "true";
		} catch (Exception e) {
			e.printStackTrace();
			return "false";
		}
	};
	@RequestMapping("/order_addProductdetail.action")
	@ResponseBody
	public String addaddProductdetail(ProductdetailVO pVo){
		try {
			orderService.addProductdetail(pVo);
			return "true";
		} catch (Exception e) {
			e.printStackTrace();
			return "false";
		}
	};
	@RequestMapping("/order_deleteOrder.action")
	@ResponseBody
	public String deleteOrder(Order order){
		try {
			orderService.deleteOrder(order);
			return "true";
		} catch (Exception e) {
			e.printStackTrace();
			return "false";
		}
	};
	@RequestMapping("/order_updateOrderExamine.action")
	@ResponseBody
	public String updateOrderExamine(Order order){
		try {
			orderService.updateOrderExamine(order);
			return "true";
		} catch (Exception e) {
			e.printStackTrace();
			return "false";
		}
	};
	@RequestMapping("/order_updateOrderStatus.action")
	@ResponseBody
	public String updateOrderStatus(Order order){
		try {
			orderService.updateOrderStatus(order);
			return "true";
		} catch (Exception e) {
			e.printStackTrace();
			return "false";
		}
	};
	@RequestMapping("/order_updateProductdetail.action")
	@ResponseBody
	public String updateProductdetail(ProductdetailVO pVo){
		try {
			Productdetail productdetail=new Productdetail();
			productdetail.setOrder(pVo.getOrder());
			List<Productdetail> list1 = selectDalByDId(productdetail);
			List<Productdetail> list2 = pVo.getList();
			int[] f_ids=new int[list1.size()];
			int[] f_id2 = null;
			int index=0;
			for (int i=0;i<list2.size();i++) {
				for (int j=0;j<list1.size();j++) {
					if (list2.get(i).getF_id()==list1.get(j).getF_id()) {
						f_ids[i]=list1.get(i).getF_id();
					}
				}
			}
			int i=0;
			boolean flag=true;
			for (Productdetail p : list1) {
				if (p.getF_id()!=f_ids[i++]) {
					if (flag) {
						f_id2=new int[list1.size()];
						flag=false;
					}
					f_id2[index++]=p.getF_id();
				}
			}
			pVo.setF_ids(f_id2);
			orderService.updateProductdetail(pVo);
			return "true";
		} catch (Exception e) {
			e.printStackTrace();
			return "false";
		}
	};
	
	
	
	
	
	@RequestMapping("/order_selectById.action")
	@ResponseBody
	public Order selectById(Order order){
		try {
			Order order2 = orderService.selectById(order);
			return order2;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	
	@RequestMapping("/order_selectPosition.action")
	@ResponseBody
	public List<Position> selectPosition(){
		try {
			List<Position> list= orderService.selectPosition();
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectUserById.action")
	@ResponseBody
	public List<User> selectUserById(User user){
		try {
			List<User> list= orderService.selectUserById(user);
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	@RequestMapping("/order_selectDalByDId.action")
	@ResponseBody
	public List<Productdetail> selectDalByDId(Productdetail productdetail){
		try {
			List<Productdetail> list = orderService.selectDalByDId(productdetail);
			return list;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	};
	


	
}
